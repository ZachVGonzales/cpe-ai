Getting to Know LEAN:

According to tradition, a programming language should be introduced by compiling and running a program that displays "Hello, world!" on the console. This simple program ensures that the language tooling is installed correctly and that the programmer is able to run the compiled code.

Since the 1970s, however, programming has changed. Today, compilers are typically integrated into text editors, and the programming environment offers feedback as the program is written. Lean is no exception: it implements an extended version of the Language Server Protocol that allows it to communicate with a text editor and provide feedback as the user types.

Languages as varied as Python, Haskell, and JavaScript offer a read-eval-print-loop (REPL), also known as an interactive toplevel or a browser console, in which expressions or statements can be entered. The language then computes and displays the result of the user's input. Lean, on the other hand, integrates these features into the interaction with the editor, providing commands that cause the text editor to display feedback integrated into the program text itself. This chapter provides a short introduction to interacting with Lean in an editor, while Hello, World! describes how to use Lean traditionally from the command line in batch mode.

It is best if you read this book with Lean open in your editor, following along and typing in each example. Please play with the examples, and see what happens!

1.1. Evaluating Expressionsüîó
The most important thing to understand as a programmer learning Lean is how evaluation works. Evaluation is the process of finding the value of an expression, just as one does in arithmetic. For instance, the value of 
15
‚àí
6
15‚àí6 is 
9
9 and the value of 
2
√ó
(
3
+
1
)
2√ó(3+1) is 
8
8. To find the value of the latter expression, 
3
+
1
3+1 is first replaced by 
4
4, yielding 
2
√ó
4
2√ó4, which itself can be reduced to 
8
8. Sometimes, mathematical expressions contain variables: the value of 
x
+
1
x+1 cannot be computed until we know what the value of 
x
x is. In Lean, programs are first and foremost expressions, and the primary way to think about computation is as evaluating expressions to find their values.

Most programming languages are imperative, where a program consists of a series of statements that should be carried out in order to find the program's result. Programs have access to mutable memory, so the value referred to by a variable can change over time. In addition to mutable state, programs may have other side effects, such as deleting files, making outgoing network connections, throwing or catching exceptions, and reading data from a database. ‚ÄúSide effects‚Äù is essentially a catch-all term for describing things that may happen in a program that don't follow the model of evaluating mathematical expressions.

In Lean, however, programs work the same way as mathematical expressions. Once given a value, variables cannot be reassigned. Evaluating an expression cannot have side effects. If two expressions have the same value, then replacing one with the other will not cause the program to compute a different result. This does not mean that Lean cannot be used to write Hello, world! to the console, but performing I/O is not a core part of the experience of using Lean in the same way. Thus, this chapter focuses on how to evaluate expressions interactively with Lean, while the next chapter describes how to write, compile, and run the Hello, world! program.

To ask Lean to evaluate an expression, write #eval before it in your editor, which will then report the result back. Typically, the result is found by putting the cursor or mouse pointer over #eval. For instance,

#eval 1 + 2
yields the value

3
Lean obeys the ordinary rules of precedence and associativity for arithmetic operators. That is,

#eval 1 + 2 * 5
yields the value 11 rather than 15.

While both ordinary mathematical notation and the majority of programming languages use parentheses (e.g. f(x)) to apply a function to its arguments, Lean simply writes the function next to its arguments (e.g. f x). Function application is one of the most common operations, so it pays to keep it concise. Rather than writing

#eval String.append("Hello, ", "Lean!")
to compute "Hello, Lean!", one would instead write

#eval String.append "Hello, " "Lean!"
where the function's two arguments are simply written next to it with spaces.

Just as the order-of-operations rules for arithmetic demand parentheses in the expression (1 + 2) * 5, parentheses are also necessary when a function's argument is to be computed via another function call. For instance, parentheses are required in

#eval String.append "great " (String.append "oak " "tree")
because otherwise the second String.append would be interpreted as an argument to the first, rather than as a function being passed "oak " and "tree" as arguments. The value of the inner String.append call must be found first, after which it can be appended to "great ", yielding the final value "great oak tree".

Imperative languages often have two kinds of conditional: a conditional statement that determines which instructions to carry out based on a Boolean value, and a conditional expression that determines which of two expressions to evaluate based on a Boolean value. For instance, in C and C++, the conditional statement is written using if and else, while the conditional expression is written with a ternary operator in which ? and : separate the condition from the branches. In Python, the conditional statement begins with if, while the conditional expression puts if in the middle. Because Lean is an expression-oriented functional language, there are no conditional statements, only conditional expressions. They are written using if, then, and else. For example,

String.append "it is " (if 1 > 2 then "yes" else "no")
evaluates to

String.append "it is " (if false then "yes" else "no")
which evaluates to

String.append "it is " "no"
which finally evaluates to "it is no".

For the sake of brevity, a series of evaluation steps like this will sometimes be written with arrows between them:

String.append "it is " (if 1 > 2 then "yes" else "no")
String.append "it is " (if false then "yes" else "no")
String.append "it is " "no"
"it is no"
1.1.1. Messages You May Meetüîó
Asking Lean to evaluate a function application that is missing an argument will lead to an error message. In particular, the example

#eval String.append "it is "
yields a quite long error message:

could not synthesize a 'ToExpr', 'Repr', or 'ToString' instance for type
  String ‚Üí String
This message occurs because Lean functions that are applied to only some of their arguments return new functions that are waiting for the rest of the arguments. Lean cannot display functions to users, and thus returns an error when asked to do so.

1.1.2. Exercisesüîó
What are the values of the following expressions? Work them out by hand, then enter them into Lean to check your work.

42 + 19

String.append "A" (String.append "B" "C")

String.append (String.append "A" "B") "C"

if 3 == 3 then 5 else 7

if 3 == 4 then "equal" else "not equal"

1.2. Typesüîó
Types classify programs based on the values that they can compute. Types serve a number of roles in a program:

They allow the compiler to make decisions about the in-memory representation of a value.

They help programmers to communicate their intent to others, serving as a lightweight specification for the inputs and outputs of a function. The compiler ensures that the program adheres to this specification.

They prevent various potential mistakes, such as adding a number to a string, and thus reduce the number of tests that are necessary for a program.

They help the Lean compiler automate the production of auxiliary code that can save boilerplate.

Lean's type system is unusually expressive. Types can encode strong specifications like ‚Äúthis sorting function returns a permutation of its input‚Äù and flexible specifications like ‚Äúthis function has different return types, depending on the value of its argument‚Äù. The type system can even be used as a full-blown logic for proving mathematical theorems. This cutting-edge expressive power doesn't make simpler types unnecessary, however, and understanding these simpler types is a prerequisite for using the more advanced features.

Every program in Lean must have a type. In particular, every expression must have a type before it can be evaluated. In the examples so far, Lean has been able to discover a type on its own, but it is sometimes necessary to provide one. This is done using the colon operator inside parentheses:

#eval (1 + 2 : Nat)
Here, Nat is the type of natural numbers, which are arbitrary-precision unsigned integers. In Lean, Nat is the default type for non-negative integer literals. This default type is not always the best choice. In C, unsigned integers underflow to the largest representable numbers when subtraction would otherwise yield a result less than zero. Nat, however, can represent arbitrarily-large unsigned numbers, so there is no largest number to underflow to. Thus, subtraction on Nat returns zero when the answer would have otherwise been negative. For instance,

#eval (1 - 2 : Nat)
evaluates to 0 rather than -1. To use a type that can represent the negative integers, provide it directly:

#eval (1 - 2 : Int)
With this type, the result is -1, as expected.

To check the type of an expression without evaluating it, use #check instead of #eval. For instance:

#check (1 - 2 : Int)
reports 1 - 2 : Int without actually performing the subtraction.

When a program can't be given a type, an error is returned from both #check and #eval. For instance:

#check String.append ["hello", " "] "world"
outputs

Application type mismatch: The argument
  ["hello", " "]
has type
  List String
but is expected to have type
  String
in the application
  String.append ["hello", " "]
because the first argument to String.append is expected to be a string, but a list of strings was provided instead.

1.3. Functions and Definitionsüîó
In Lean, definitions are introduced using the def keyword. For instance, to define the name hello to refer to the string "Hello", write:

def hello := "Hello"
In Lean, new names are defined using the colon-equal operator := rather than =. This is because = is used to describe equalities between existing expressions, and using two different operators helps prevent confusion.

In the definition of hello, the expression "Hello" is simple enough that Lean is able to determine the definition's type automatically. However, most definitions are not so simple, so it will usually be necessary to add a type. This is done using a colon after the name being defined:

def lean : String := "Lean"
Now that the names have been defined, they can be used, so

#eval String.append hello (String.append " " lean)
outputs

"Hello Lean"
In Lean, defined names may only be used after their definitions.

In many languages, definitions of functions use a different syntax than definitions of other values. For instance, Python function definitions begin with the def keyword, while other definitions are defined with an equals sign. In Lean, functions are defined using the same def keyword as other values. Nonetheless, definitions such as hello introduce names that refer directly to their values, rather than to zero-argument functions that return equivalent results each time they are called.

1.3.1. Defining Functionsüîó
There are a variety of ways to define functions in Lean. The simplest is to place the function's arguments before the definition's type, separated by spaces. For instance, a function that adds one to its argument can be written:

def add1 (n : Nat) : Nat := n + 1
Testing this function with #eval gives 8, as expected:

#eval add1 7
Just as functions are applied to multiple arguments by writing spaces between each argument, functions that accept multiple arguments are defined with spaces between the arguments' names and types. The function maximum, whose result is equal to the greatest of its two arguments, takes two Nat arguments n and k and returns a Nat.

def maximum (n : Nat) (k : Nat) : Nat :=
  if n < k then
    k
  else n
Similarly, the function spaceBetween joins two strings with a space between them.

def spaceBetween (before : String) (after : String) : String :=
  String.append before (String.append " " after)
When a defined function like maximum has been provided with its arguments, the result is determined by first replacing the argument names with the provided values in the body, and then evaluating the resulting body. For example:

maximum (5 + 8) (2 * 7)
maximum 13 14
if 13 < 14 then 14 else 13
14
Expressions that evaluate to natural numbers, integers, and strings have types that say this (Nat, Int, and String, respectively). This is also true of functions. A function that accepts a Nat and returns a Bool has type Nat ‚Üí Bool, and a function that accepts two Nats and returns a Nat has type Nat ‚Üí Nat ‚Üí Nat.

As a special case, Lean returns a function's signature when its name is used directly with #check. Entering #check add1 yields add1 (n : Nat) : Nat. However, Lean can be ‚Äútricked‚Äù into showing the function's type by writing the function's name in parentheses, which causes the function to be treated as an ordinary expression, so #check (add1) yields add1 : Nat ‚Üí Nat and #check (maximum) yields maximum : Nat ‚Üí Nat ‚Üí Nat. This arrow can also be written with an ASCII alternative arrow ->, so the preceding function types can be written example : Nat -> Nat := add1 and example : Nat -> Nat -> Nat := maximum, respectively.

Behind the scenes, all functions actually expect precisely one argument. Functions like maximum that seem to take more than one argument are in fact functions that take one argument and then return a new function. This new function takes the next argument, and the process continues until no more arguments are expected. This can be seen by providing one argument to a multiple-argument function: #check maximum 3 yields maximum 3 : Nat ‚Üí Nat and #check spaceBetween "Hello " yields spaceBetween "Hello " : String ‚Üí String. Using a function that returns a function to implement multiple-argument functions is called currying after the mathematician Haskell Curry. Function arrows associate to the right, which means that Nat ‚Üí Nat ‚Üí Nat should be parenthesized Nat ‚Üí (Nat ‚Üí Nat).

1.3.1.1. Exercisesüîó
Define the function joinStringsWith with type String ‚Üí String ‚Üí String ‚Üí String that creates a new string by placing its first argument between its second and third arguments. joinStringsWith ", " "one" "and another" should evaluate to "one, and another".

What is the type of joinStringsWith ": "? Check your answer with Lean.

Define a function volume with type Nat ‚Üí Nat ‚Üí Nat ‚Üí Nat that computes the volume of a rectangular prism with the given height, width, and depth.

1.3.2. Defining Typesüîó
Most typed programming languages have some means of defining aliases for types, such as C's typedef. In Lean, however, types are a first-class part of the language‚Äîthey are expressions like any other. This means that definitions can refer to types just as well as they can refer to other values.

For example, if String is too much to type, a shorter abbreviation Str can be defined:

def Str : Type := String
It is then possible to use Str as a definition's type instead of String:

def aStr : Str := "This is a string."
The reason this works is that types follow the same rules as the rest of Lean. Types are expressions, and in an expression, a defined name can be replaced with its definition. Because Str has been defined to mean String, the definition of aStr makes sense.

1.3.2.1. Messages You May Meetüîó
Experimenting with using definitions for types is made more complicated by the way that Lean supports overloaded integer literals. If Nat is too short, a longer name NaturalNumber can be defined:

def NaturalNumber : Type := Nat
However, using NaturalNumber as a definition's type instead of Nat does not have the expected effect. In particular, the definition:

def thirtyEight : NaturalNumber := 38
results in the following error:

failed to synthesize
  OfNat NaturalNumber 38
numerals are polymorphic in Lean, but the numeral `38` cannot be used in a context where the expected type is
  NaturalNumber
due to the absence of the instance above

Hint: Additional diagnostic information may be available using the `set_option diagnostics true` command.
This error occurs because Lean allows number literals to be overloaded. When it makes sense to do so, natural number literals can be used for new types, just as if those types were built in to the system. This is part of Lean's mission of making it convenient to represent mathematics, and different branches of mathematics use number notation for very different purposes. The specific feature that allows this overloading does not replace all defined names with their definitions before looking for overloading, which is what leads to the error message above.

One way to work around this limitation is by providing the type Nat on the right-hand side of the definition, causing Nat's overloading rules to be used for 38:

def thirtyEight : NaturalNumber := (38 : Nat)
The definition is still type-correct because NaturalNumber is the same type as Nat‚Äîby definition!

Another solution is to define an overloading for NaturalNumber that works equivalently to the one for Nat. This requires more advanced features of Lean, however.

Finally, defining the new name for Nat using abbrev instead of def allows overloading resolution to replace the defined name with its definition. Definitions written using abbrev are always unfolded. For instance,

abbrev N : Type := Nat
and

def thirtyNine : N := 39
are accepted without issue.

Behind the scenes, some definitions are internally marked as being unfoldable during overload resolution, while others are not. Definitions that are to be unfolded are called reducible. Control over reducibility is essential to allow Lean to scale: fully unfolding all definitions can result in very large types that are slow for a machine to process and difficult for users to understand. Definitions produced with abbrev are marked as reducible.

1.4. Structuresüîó
The first step in writing a program is usually to identify the problem domain's concepts, and then find suitable representations for them in code. Sometimes, a domain concept is a collection of other, simpler, concepts. In that case, it can be convenient to group these simpler components together into a single ‚Äúpackage‚Äù, which can then be given a meaningful name. In Lean, this is done using structures, which are analogous to structs in C or Rust and records in C#.

Defining a structure introduces a completely new type to Lean that can't be reduced to any other type. This is useful because multiple structures might represent different concepts that nonetheless contain the same data. For instance, a point might be represented using either Cartesian or polar coordinates, each being a pair of floating-point numbers. Defining separate structures prevents API clients from confusing one for another.

Lean's floating-point number type is called Float, and floating-point numbers are written in the usual notation.

#check 1.2
1.2 : Float
#check -454.2123215
-454.2123215 : Float
#check 0.0
0.0 : Float
When floating point numbers are written with the decimal point, Lean will infer the type Float. If they are written without it, then a type annotation may be necessary.

#check 0
0 : Nat
#check (0 : Float)
0 : Float
A Cartesian point is a structure with two Float fields, called x and y. This is declared using the structure keyword.

structure Point where
  x : Float
  y : Float
After this declaration, Point is a new structure type. The typical way to create a value of a structure type is to provide values for all of its fields inside of curly braces. The origin of a Cartesian plane is where x and y are both zero:

def origin : Point := { x := 0.0, y := 0.0 }
The result of #eval origin looks very much like the definition of origin.

{ x := 0.000000, y := 0.000000 }
Because structures exist to ‚Äúbundle up‚Äù a collection of data, naming it and treating it as a single unit, it is also important to be able to extract the individual fields of a structure. This is done using dot notation, as in C, Python, Rust, or JavaScript.

#eval origin.x
0.000000
#eval origin.y
0.000000
This can be used to define functions that take structures as arguments. For instance, addition of points is performed by adding the underlying coordinate values. It should be the case that

#eval addPoints { x := 1.5, y := 32 } { x := -8, y := 0.2 }
yields

{ x := -6.500000, y := 32.200000 }
The function itself takes two Points as arguments, called p1 and p2. The resulting point is based on the x and y fields of both p1 and p2:

def addPoints (p1 : Point) (p2 : Point) : Point :=
  { x := p1.x + p2.x, y := p1.y + p2.y }
Similarly, the distance between two points, which is the square root of the sum of the squares of the differences in their x and y components, can be written:

def distance (p1 : Point) (p2 : Point) : Float :=
  Float.sqrt (((p2.x - p1.x) ^ 2.0) + ((p2.y - p1.y) ^ 2.0))
For example, the distance between 
(
1
,
2
)
(1,2) and 
(
5
,
‚àí
1
)
(5,‚àí1) is 
5
5:

#eval distance { x := 1.0, y := 2.0 } { x := 5.0, y := -1.0 }
5.000000
Multiple structures may have fields with the same names. A three-dimensional point datatype may share the fields x and y, and be instantiated with the same field names:

structure Point3D where
  x : Float
  y : Float
  z : Float
def origin3D : Point3D := { x := 0.0, y := 0.0, z := 0.0 }
This means that the structure's expected type must be known in order to use the curly-brace syntax. If the type is not known, Lean will not be able to instantiate the structure. For example,

#check { x := 0.0, y := 0.0 }
leads to the error

invalid {...} notation, expected type is not known
As usual, the situation can be remedied by providing a type annotation.

#check ({ x := 0.0, y := 0.0 } : Point)
{ x := 0.0, y := 0.0 } : Point
To make programs more concise, Lean also allows the structure type annotation inside the curly braces.

#check { x := 0.0, y := 0.0 : Point}
{ x := 0.0, y := 0.0 } : Point
1.4.1. Updating Structuresüîó
Imagine a function zeroX that replaces the x field of a Point with 0. In most programming language communities, this sentence would mean that the memory location pointed to by x was to be overwritten with a new value. However, Lean is a functional programming language. In functional programming communities, what is almost always meant by this kind of statement is that a fresh Point is allocated with the x field pointing to the new value, and all other fields pointing to the original values from the input. One way to write zeroX is to follow this description literally, filling out the new value for x and manually transferring y:

def zeroX (p : Point) : Point :=
  { x := 0, y := p.y }
This style of programming has drawbacks, however. First off, if a new field is added to a structure, then every site that updates any field at all must be updated, causing maintenance difficulties. Secondly, if the structure contains multiple fields with the same type, then there is a real risk of copy-paste coding leading to field contents being duplicated or switched. Finally, the program becomes long and bureaucratic.

Lean provides a convenient syntax for replacing some fields in a structure while leaving the others alone. This is done by using the with keyword in a structure initialization. The source of unchanged fields occurs before the with, and the new fields occur after. For example, zeroX can be written with only the new x value:

def zeroX (p : Point) : Point :=
  { p with x := 0 }
Remember that this structure update syntax does not modify existing values‚Äîit creates new values that share some fields with old values. Given the point fourAndThree:

def fourAndThree : Point :=
  { x := 4.3, y := 3.4 }
evaluating it, then evaluating an update of it using zeroX, then evaluating it again yields the original value:

#eval fourAndThree
{ x := 4.300000, y := 3.400000 }
#eval zeroX fourAndThree
{ x := 0.000000, y := 3.400000 }
#eval fourAndThree
{ x := 4.300000, y := 3.400000 }
One consequence of the fact that structure updates do not modify the original structure is that it becomes easier to reason about cases where the new value is computed from the old one. All references to the old structure continue to refer to the same field values in all of the new values provided.

1.4.2. Behind the Scenesüîó
Every structure has a constructor. Here, the term ‚Äúconstructor‚Äù may be a source of confusion. Unlike constructors in languages such as Java or Python, constructors in Lean are not arbitrary code to be run when a datatype is initialized. Instead, constructors simply gather the data to be stored in the newly-allocated data structure. It is not possible to provide a custom constructor that pre-processes data or rejects invalid arguments. This is really a case of the word ‚Äúconstructor‚Äù having different, but related, meanings in the two contexts.

By default, the constructor for a structure named S is named S.mk. Here, S is a namespace qualifier, and mk is the name of the constructor itself. Instead of using curly-brace initialization syntax, the constructor can also be applied directly.

#check Point.mk 1.5 2.8
However, this is not generally considered to be good Lean style, and Lean even returns its feedback using the standard structure initializer syntax.

{ x := 1.5, y := 2.8 } : Point
Constructors have function types, which means they can be used anywhere that a function is expected. For instance, Point.mk is a function that accepts two Floats (respectively x and y) and returns a new Point.

#check (Point.mk)
Point.mk : Float ‚Üí Float ‚Üí Point
To override a structure's constructor name, write it with two colons at the beginning. For instance, to use Point.point instead of Point.mk, write:

structure Point where
  point ::
  x : Float
  y : Float
In addition to the constructor, an accessor function is defined for each field of a structure. These have the same name as the field, in the structure's namespace. For Point, accessor functions Point.x and Point.y are generated.

#check (Point.x)
Point.x : Point ‚Üí Float
#check (Point.y)
Point.y : Point ‚Üí Float
In fact, just as the curly-braced structure construction syntax is converted to a call to the structure's constructor behind the scenes, the syntax x in the prior definition of addPoints is converted into a call to the x accessor. That is, #eval origin.x and #eval Point.x origin both yield

0.000000
Accessor dot notation is usable with more than just structure fields. It can also be used for functions that take any number of arguments. More generally, accessor notation has the form TARGET.f ARG1 ARG2 .... If TARGET has type T, the function named T.f is called. TARGET becomes its leftmost argument of type T, which is often but not always the first one, and ARG1 ARG2 ... are provided in order as the remaining arguments. For instance, String.append can be invoked from a string with accessor notation, even though String is not a structure with an append field.

#eval "one string".append " and another"
"one string and another"
In that example, TARGET represents "one string" and ARG1 represents " and another".

The function Point.modifyBoth (that is, modifyBoth defined in the Point namespace) applies a function to both fields in a Point:

def Point.modifyBoth (f : Float ‚Üí Float) (p : Point) : Point :=
  { x := f p.x, y := f p.y }
Even though the Point argument comes after the function argument, it can be used with dot notation as well:

#eval fourAndThree.modifyBoth Float.floor
{ x := 4.000000, y := 3.000000 }
In this case, TARGET represents fourAndThree, while ARG1 is Float.floor. This is because the target of the accessor notation is used as the first argument in which the type matches, not necessarily the first argument.

1.4.3. Exercisesüîó
Define a structure named RectangularPrism that contains the height, width, and depth of a rectangular prism, each as a Float.

Define a function named volume : RectangularPrism ‚Üí Float that computes the volume of a rectangular prism.

Define a structure named Segment that represents a line segment by its endpoints, and define a function length : Segment ‚Üí Float that computes the length of a line segment. Segment should have at most two fields.

Which names are introduced by the declaration of RectangularPrism?

Which names are introduced by the following declarations of Hamster and Book? What are their types?

structure Hamster where
  name : String
  fluffy : Bool
structure Book where
  makeBook ::
  title : String
  author : String
  price : Float

1.5. Datatypes and Patternsüîó
Structures enable multiple independent pieces of data to be combined into a coherent whole that is represented by a brand new type. Types such as structures that group together a collection of values are called product types. Many domain concepts, however, can't be naturally represented as structures. For instance, an application might need to track user permissions, where some users are document owners, some may edit documents, and others may only read them. A calculator has a number of binary operators, such as addition, subtraction, and multiplication. Structures do not provide an easy way to encode multiple choices.

Similarly, while a structure is an excellent way to keep track of a fixed set of fields, many applications require data that may contain an arbitrary number of elements. Most classic data structures, such as trees and lists, have a recursive structure, where the tail of a list is itself a list, or where the left and right branches of a binary tree are themselves binary trees. In the aforementioned calculator, the structure of expressions themselves is recursive. The summands in an addition expression may themselves be multiplication expressions, for instance.

Datatypes that allow choices are called sum types and datatypes that can include instances of themselves are called recursive datatypes. Recursive sum types are called inductive datatypes, because mathematical induction may be used to prove statements about them. When programming, inductive datatypes are consumed through pattern matching and recursive functions.

Many of the built-in types are actually inductive datatypes in the standard library. For instance, Bool is an inductive datatype:

inductive Bool where
  | false : Bool
  | true : Bool
This definition has two main parts. The first line provides the name of the new type (Bool), while the remaining lines each describe a constructor. As with constructors of structures, constructors of inductive datatypes are mere inert receivers of and containers for other data, rather than places to insert arbitrary initialization and validation code. Unlike structures, inductive datatypes may have multiple constructors. Here, there are two constructors, true and false, and neither takes any arguments. Just as a structure declaration places its names in a namespace named after the declared type, an inductive datatype places the names of its constructors in a namespace. In the Lean standard library, true and false are re-exported from this namespace so that they can be written alone, rather than as Bool.true and Bool.false, respectively.

From a data modeling perspective, inductive datatypes are used in many of the same contexts where a sealed abstract class might be used in other languages. In languages like C# or Java, one might write a similar definition of Bool:

abstract class Bool {}
class True : Bool {}
class False : Bool {}
However, the specifics of these representations are fairly different. In particular, each non-abstract class creates both a new type and new ways of allocating data. In the object-oriented example, True and False are both types that are more specific than Bool, while the Lean definition introduces only the new type Bool.

The type Nat of non-negative integers is an inductive datatype:

inductive Nat where
  | zero : Nat
  | succ (n : Nat) : Nat
Here, zero represents 0, while succ represents the successor of some other number. The Nat mentioned in succ's declaration is the very type Nat that is in the process of being defined. Successor means ‚Äúone greater than‚Äù, so the successor of five is six and the successor of 32,185 is 32,186. Using this definition, 4 is represented as Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero))). This definition is almost like the definition of Bool with slightly different names. The only real difference is that succ is followed by (n : Nat), which specifies that the constructor succ takes an argument of type Nat which happens to be named n. The names zero and succ are in a namespace named after their type, so they must be referred to as Nat.zero and Nat.succ, respectively.

Argument names, such as n, may occur in Lean's error messages and in feedback provided when writing mathematical proofs. Lean also has an optional syntax for providing arguments by name. Generally, however, the choice of argument name is less important than the choice of a structure field name, as it does not form as large a part of the API.

In C# or Java, Nat could be defined as follows:

abstract class Nat {}
class Zero : Nat {}
class Succ : Nat {
    public Nat n;
    public Succ(Nat pred) {
        n = pred;
    }
}
Just as in the Bool example above, this defines more types than the Lean equivalent. Additionally, this example highlights how Lean datatype constructors are much more like subclasses of an abstract class than they are like constructors in C# or Java, as the constructor shown here contains initialization code to be executed.

Sum types are also similar to using a string tag to encode discriminated unions in TypeScript. In TypeScript, Nat could be defined as follows:

interface Zero {
    tag: "zero";
}

interface Succ {
    tag: "succ";
    predecessor: Nat;
}

type Nat = Zero | Succ;
Just like C# and Java, this encoding ends up with more types than in Lean, because Zero and Succ are each a type on their own. It also illustrates that Lean constructors correspond to objects in JavaScript or TypeScript that include a tag that identifies the contents.

1.5.1. Pattern Matchingüîó
In many languages, these kinds of data are consumed by first using an instance-of operator to check which subclass has been received and then reading the values of the fields that are available in the given subclass. The instance-of check determines which code to run, ensuring that the data needed by this code is available, while the fields themselves provide the data. In Lean, both of these purposes are simultaneously served by pattern matching.

An example of a function that uses pattern matching is isZero, which is a function that returns true when its argument is Nat.zero, or false otherwise.

def isZero (n : Nat) : Bool :=
  match n with
  | Nat.zero => true
  | Nat.succ k => false
The match expression is provided the function's argument n for destructuring. If n was constructed by Nat.zero, then the first branch of the pattern match is taken, and the result is true. If n was constructed by Nat.succ, then the second branch is taken, and the result is false.

Step-by-step, evaluation of isZero Nat.zero proceeds as follows:

isZero Nat.zero
match Nat.zero with
| Nat.zero => true
| Nat.succ k => false
true
Evaluation of isZero 5 proceeds similarly:

isZero 5
isZero (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))))
match Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))) with
| Nat.zero => true
| Nat.succ k => false
false
The k in the second branch of the pattern in isZero is not decorative. It makes the Nat that is the argument to Nat.succ visible, with the provided name. That smaller number can then be used to compute the final result of the expression.

Just as the successor of some number 
n
n is one greater than 
n
n (that is, 
n
+
1
n+1), the predecessor of a number is one less than it. If pred is a function that finds the predecessor of a Nat, then it should be the case that the following examples find the expected result:

#eval pred 5
4
#eval pred 839
838
Because Nat cannot represent negative numbers, Nat.zero is a bit of a conundrum. Usually, when working with Nat, operators that would ordinarily produce a negative number are redefined to produce zero itself:

#eval pred 0
0
To find the predecessor of a Nat, the first step is to check which constructor was used to create it. If it was Nat.zero, then the result is Nat.zero. If it was Nat.succ, then the name k is used to refer to the Nat underneath it. And this Nat is the desired predecessor, so the result of the Nat.succ branch is k.

def pred (n : Nat) : Nat :=
  match n with
  | Nat.zero => Nat.zero
  | Nat.succ k => k
Applying this function to 5 yields the following steps:

pred 5
pred (Nat.succ 4)
match Nat.succ 4 with
| Nat.zero => Nat.zero
| Nat.succ k => k
4
Pattern matching can be used with structures as well as with sum types. For instance, a function that extracts the third dimension from a Point3D can be written as follows:

def depth (p : Point3D) : Float :=
  match p with
  | { x:= h, y := w, z := d } => d
In this case, it would have been much simpler to just use the Point3D.z accessor, but structure patterns are occasionally the simplest way to write a function.

1.5.2. Recursive Functionsüîó
Definitions that refer to the name being defined are called recursive definitions. Inductive datatypes are allowed to be recursive; indeed, Nat is an example of such a datatype because succ demands another Nat. Recursive datatypes can represent arbitrarily large data, limited only by technical factors like available memory. Just as it would be impossible to write down one constructor for each natural number in the datatype definition, it is also impossible to write down a pattern match case for each possibility.

Recursive datatypes are nicely complemented by recursive functions. A simple recursive function over Nat checks whether its argument is even. In this case, Nat.zero is even. Non-recursive branches of the code like this one are called base cases. The successor of an odd number is even, and the successor of an even number is odd. This means that a number built with Nat.succ is even if and only if its argument is not even.

def even (n : Nat) : Bool :=
  match n with
  | Nat.zero => true
  | Nat.succ k => not (even k)
This pattern of thought is typical for writing recursive functions on Nat. First, identify what to do for Nat.zero. Then, determine how to transform a result for an arbitrary Nat into a result for its successor, and apply this transformation to the result of the recursive call. This pattern is called structural recursion.

Unlike many languages, Lean ensures by default that every recursive function will eventually reach a base case. From a programming perspective, this rules out accidental infinite loops. But this feature is especially important when proving theorems, where infinite loops cause major difficulties. A consequence of this is that Lean will not accept a version of even that attempts to invoke itself recursively on the original number:

def evenLoops (n : Nat) : Bool :=
  match n with
  | Nat.zero => true
  | Nat.succ k => not (evenLoops n)
The important part of the error message is that Lean could not determine that the recursive function always reaches a base case (because it doesn't).

fail to show termination for
  evenLoops
with errors
failed to infer structural recursion:
Not considering parameter n of evenLoops:
  it is unchanged in the recursive calls
no parameters suitable for structural recursion

well-founded recursion cannot be used, 'evenLoops' does not take any (non-fixed) arguments
Even though addition takes two arguments, only one of them needs to be inspected. To add zero to a number 
n
n, just return 
n
n. To add the successor of 
k
k to 
n
n, take the successor of the result of adding 
k
k to 
n
n.

def plus (n : Nat) (k : Nat) : Nat :=
  match k with
  | Nat.zero => n
  | Nat.succ k' => Nat.succ (plus n k')
In the definition of plus, the name k' is chosen to indicate that it is connected to, but not identical with, the argument k. For instance, walking through the evaluation of plus 3 2 yields the following steps:

plus 3 2
plus 3 (Nat.succ (Nat.succ Nat.zero))
match Nat.succ (Nat.succ Nat.zero) with
| Nat.zero => 3
| Nat.succ k' => Nat.succ (plus 3 k')
Nat.succ (plus 3 (Nat.succ Nat.zero))
Nat.succ (match Nat.succ Nat.zero with
| Nat.zero => 3
| Nat.succ k' => Nat.succ (plus 3 k'))
Nat.succ (Nat.succ (plus 3 Nat.zero))
Nat.succ (Nat.succ (match Nat.zero with
| Nat.zero => 3
| Nat.succ k' => Nat.succ (plus 3 k')))
Nat.succ (Nat.succ 3)
5
One way to think about addition is that 
n
+
k
n+k applies Nat.succ 
k
k times to 
n
n. Similarly, multiplication 
n
√ó
k
n√ók adds 
n
n to itself 
k
k times and subtraction 
n
‚àí
k
n‚àík takes 
n
n's predecessor 
k
k times.

def times (n : Nat) (k : Nat) : Nat :=
  match k with
  | Nat.zero => Nat.zero
  | Nat.succ k' => plus n (times n k')
def minus (n : Nat) (k : Nat) : Nat :=
  match k with
  | Nat.zero => n
  | Nat.succ k' => pred (minus n k')
Not every function can be easily written using structural recursion. The understanding of addition as iterated Nat.succ, multiplication as iterated addition, and subtraction as iterated predecessor suggests an implementation of division as iterated subtraction. In this case, if the numerator is less than the divisor, the result is zero. Otherwise, the result is the successor of dividing the numerator minus the divisor by the divisor.

def div (n : Nat) (k : Nat) : Nat :=
  if n < k then
    0
  else Nat.succ (div (n - k) k)
As long as the second argument is not 0, this program terminates, as it always makes progress towards the base case. However, it is not structurally recursive, because it doesn't follow the pattern of finding a result for zero and transforming a result for a smaller Nat into a result for its successor. In particular, the recursive invocation of the function is applied to the result of another function call, rather than to an input constructor's argument. Thus, Lean rejects it with the following message:

fail to show termination for
  div
with errors
failed to infer structural recursion:
Not considering parameter k of div:
  it is unchanged in the recursive calls
Cannot use parameter k:
  failed to eliminate recursive application
    div (n - k) k


failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
k n	:	Nat
h‚úù	:	¬¨n < k
‚ä¢ n - k < n
This message means that div requires a manual proof of termination. This topic is explored in the final chapter.

1.6. Polymorphismüîó
Just as in most languages, types in Lean can take arguments. For instance, the type List Nat describes lists of natural numbers, List String describes lists of strings, and List (List Point) describes lists of lists of points. This is very similar to List<Nat>, List<String>, or List<List<Point>> in a language like C# or Java. Just as Lean uses a space to pass an argument to a function, it uses a space to pass an argument to a type.

In functional programming, the term polymorphism typically refers to datatypes and definitions that take types as arguments. This is different from the object-oriented programming community, where the term typically refers to subclasses that may override some behavior of their superclass. In this book, ‚Äúpolymorphism‚Äù always refers to the first sense of the word. These type arguments can be used in the datatype or definition, which allows the same datatype or definition to be used with any type that results from replacing the arguments' names with some other types.

The Point structure requires that both the x and y fields are Floats. There is, however, nothing about points that require a specific representation for each coordinate. A polymorphic version of Point, called PPoint, can take a type as an argument, and then use that type for both fields:

structure PPoint (Œ± : Type) where
  x : Œ±
  y : Œ±
Just as a function definition's arguments are written immediately after the name being defined, a structure's arguments are written immediately after the structure's name. It is customary to use Greek letters to name type arguments in Lean when no more specific name suggests itself. Type is a type that describes other types, so Nat, List String, and PPoint Int all have type Type.

Just like List, PPoint can be used by providing a specific type as its argument:

def natOrigin : PPoint Nat :=
  { x := Nat.zero, y := Nat.zero }
In this example, both fields are expected to be Nats. Just as a function is called by replacing its argument variables with its argument values, providing PPoint with the type Nat as an argument yields a structure in which the fields x and y have the type Nat, because the argument name Œ± has been replaced by the argument type Nat. Types are ordinary expressions in Lean, so passing arguments to polymorphic types (like PPoint) doesn't require any special syntax.

Definitions may also take types as arguments, which makes them polymorphic. The function replaceX replaces the x field of a PPoint with a new value. In order to allow replaceX to work with any polymorphic point, it must be polymorphic itself. This is achieved by having its first argument be the type of the point's fields, with later arguments referring back to the first argument's name.

def replaceX (Œ± : Type) (point : PPoint Œ±) (newX : Œ±) : PPoint Œ± :=
  { point with x := newX }
In other words, when the types of the arguments point and newX mention Œ±, they are referring to whichever type was provided as the first argument. This is similar to the way that function argument names refer to the values that were provided when they occur in the function's body.

This can be seen by asking Lean to check the type of replaceX, and then asking it to check the type of replaceX Nat.

#check (replaceX)
replaceX : (Œ± : Type) ‚Üí PPoint Œ± ‚Üí Œ± ‚Üí PPoint Œ±
This function type includes the name of the first argument, and later arguments in the type refer back to this name. Just as the value of a function application is found by replacing the argument name with the provided argument value in the function's body, the type of a function application is found by replacing the argument's name with the provided value in the function's return type. Providing the first argument, Nat, causes all occurrences of Œ± in the remainder of the type to be replaced with Nat:

#check replaceX Nat
replaceX Nat : PPoint Nat ‚Üí Nat ‚Üí PPoint Nat
Because the remaining arguments are not explicitly named, no further substitution occurs as more arguments are provided:

#check replaceX Nat natOrigin
replaceX Nat natOrigin : Nat ‚Üí PPoint Nat
#check replaceX Nat natOrigin 5
replaceX Nat natOrigin 5 : PPoint Nat
The fact that the type of the whole function application expression was determined by passing a type as an argument has no bearing on the ability to evaluate it.

#eval replaceX Nat natOrigin 5
{ x := 5, y := 0 }
Polymorphic functions work by taking a named type argument and having later types refer to the argument's name. However, there's nothing special about type arguments that allows them to be named. Given a datatype that represents positive or negative signs:

inductive Sign where
  | pos
  | neg
it is possible to write a function whose argument is a sign. If the argument is positive, the function returns a Nat, while if it's negative, it returns an Int:

def posOrNegThree (s : Sign) :
    match s with | Sign.pos => Nat | Sign.neg => Int :=
  match s with
  | Sign.pos => (3 : Nat)
  | Sign.neg => (-3 : Int)
Because types are first class and can be computed using the ordinary rules of the Lean language, they can be computed by pattern-matching against a datatype. When Lean is checking this function, it uses the fact that the match-expression in the function's body corresponds to the match-expression in the type to make Nat be the expected type for the pos case and to make Int be the expected type for the neg case.

Applying posOrNegThree to pos results in the argument name s in both the body of the function and its return type being replaced by pos. Evaluation can occur both in the expression and its type:

(posOrNegThree Sign.pos :
 match Sign.pos with | Sign.pos => Nat | Sign.neg => Int)
((match Sign.pos with
  | Sign.pos => (3 : Nat)
  | Sign.neg => (-3 : Int)) :
 match Sign.pos with | Sign.pos => Nat | Sign.neg => Int)
((3 : Nat) : Nat)
3
1.6.1. Linked Listsüîó
Lean's standard library includes a canonical linked list datatype, called List, and special syntax that makes it more convenient to use. Lists are written in square brackets. For instance, a list that contains the prime numbers less than 10 can be written:

def primesUnder10 : List Nat := [2, 3, 5, 7]
Behind the scenes, List is an inductive datatype, defined like this:

inductive List (Œ± : Type) where
  | nil : List Œ±
  | cons : Œ± ‚Üí List Œ± ‚Üí List Œ±
The actual definition in the standard library is slightly different, because it uses features that have not yet been presented, but it is substantially similar. This definition says that List takes a single type as its argument, just as PPoint did. This type is the type of the entries stored in the list. According to the constructors, a List Œ± can be built with either nil or cons. The constructor nil represents empty lists and the constructor cons is used for non-empty lists. The first argument to cons is the head of the list, and the second argument is its tail. A list that contains 
n
n entries contains 
n
n cons constructors, the last of which has nil as its tail.

The primesUnder10 example can be written more explicitly by using List's constructors directly:

def explicitPrimesUnder10 : List Nat :=
  List.cons 2 (List.cons 3 (List.cons 5 (List.cons 7 List.nil)))
These two definitions are completely equivalent, but primesUnder10 is much easier to read than explicitPrimesUnder10.

Functions that consume Lists can be defined in much the same way as functions that consume Nats. Indeed, one way to think of a linked list is as a Nat that has an extra data field dangling off each succ constructor. From this point of view, computing the length of a list is the process of replacing each cons with a succ and the final nil with a zero. Just as replaceX took the type of the fields of the point as an argument, length takes the type of the list's entries. For example, if the list contains strings, then the first argument is String: length String ["Sourdough", "bread"]. It should compute like this:

length String ["Sourdough", "bread"]
length String (List.cons "Sourdough" (List.cons "bread" List.nil))
Nat.succ (length String (List.cons "bread" List.nil))
Nat.succ (Nat.succ (length String List.nil))
Nat.succ (Nat.succ Nat.zero)
2
The definition of length is both polymorphic (because it takes the list entry type as an argument) and recursive (because it refers to itself). Generally, functions follow the shape of the data: recursive datatypes lead to recursive functions, and polymorphic datatypes lead to polymorphic functions.

def length (Œ± : Type) (xs : List Œ±) : Nat :=
  match xs with
  | List.nil => Nat.zero
  | List.cons y ys => Nat.succ (length Œ± ys)
Names such as xs and ys are conventionally used to stand for lists of unknown values. The s in the name indicates that they are plural, so they are pronounced ‚Äúexes‚Äù and ‚Äúwhys‚Äù rather than ‚Äúx s‚Äù and ‚Äúy s‚Äù.

To make it easier to read functions on lists, the bracket notation [] can be used to pattern-match against nil, and an infix :: can be used in place of cons:

def length (Œ± : Type) (xs : List Œ±) : Nat :=
  match xs with
  | [] => 0
  | y :: ys => Nat.succ (length Œ± ys)
1.6.2. Implicit Argumentsüîó
Both replaceX and length are somewhat bureaucratic to use, because the type argument is typically uniquely determined by the later values. Indeed, in most languages, the compiler is perfectly capable of determining type arguments on its own, and only occasionally needs help from users. This is also the case in Lean. Arguments can be declared implicit by wrapping them in curly braces instead of parentheses when defining a function. For example, a version of replaceX with an implicit type argument looks like this:

def replaceX {Œ± : Type} (point : PPoint Œ±) (newX : Œ±) : PPoint Œ± :=
  { point with x := newX }
It can be used with natOrigin without providing Nat explicitly, because Lean can infer the value of Œ± from the later arguments:

#eval replaceX natOrigin 5
{ x := 5, y := 0 }
Similarly, length can be redefined to take the entry type implicitly:

def length {Œ± : Type} (xs : List Œ±) : Nat :=
  match xs with
  | [] => 0
  | y :: ys => Nat.succ (length ys)
This length function can be applied directly to primesUnder10:

#eval length primesUnder10
4
In the standard library, Lean calls this function List.length, which means that the dot syntax that is used for structure field access can also be used to find the length of a list:

#eval primesUnder10.length
4
Just as C# and Java require type arguments to be provided explicitly from time to time, Lean is not always capable of finding implicit arguments. In these cases, they can be provided using their names. For example, a version of List.length that only works for lists of integers can be specified by setting Œ± to Int:

#check List.length (Œ± := Int)
List.length : List Int ‚Üí Nat
1.6.3. More Built-In Datatypesüîó
In addition to lists, Lean's standard library contains a number of other structures and inductive datatypes that can be used in a variety of contexts.

1.6.3.1. Optionüîó
Not every list has a first entry‚Äîsome lists are empty. Many operations on collections may fail to find what they are looking for. For instance, a function that finds the first entry in a list may not find any such entry. It must therefore have a way to signal that there was no first entry.

Many languages have a null value that represents the absence of a value. Instead of equipping existing types with a special null value, Lean provides a datatype called Option that equips some other type with an indicator for missing values. For instance, a nullable Int is represented by Option Int, and a nullable list of strings is represented by the type Option (List String). Introducing a new type to represent nullability means that the type system ensures that checks for null cannot be forgotten, because an Option Int can't be used in a context where an Int is expected.

Option has two constructors, called some and none, that respectively represent the non-null and null versions of the underlying type. The non-null constructor, some, contains the underlying value, while none takes no arguments:

inductive Option (Œ± : Type) : Type where
  | none : Option Œ±
  | some (val : Œ±) : Option Œ±
The Option type is very similar to nullable types in languages like C# and Kotlin, but it is not identical. In these languages, if a type (say, Boolean) always refers to actual values of the type (true and false), the type Boolean? or Nullable<Boolean> additionally admits the null value. Tracking this in the type system is very useful: the type checker and other tooling can help programmers remember to check for null, and APIs that explicitly describe nullability through type signatures are more informative than ones that don't. However, these nullable types differ from Lean's Option in one very important way, which is that they don't allow multiple layers of optionality. Option (Option Int) can be constructed with none, some none, or some (some 360). Kotlin, on the other hand, treats T?? as being equivalent to T?. This subtle difference is rarely relevant in practice, but it can matter from time to time.

To find the first entry in a list, if it exists, use List.head?. The question mark is part of the name, and is not related to the use of question marks to indicate nullable types in C# or Kotlin. In the definition of List.head?, an underscore is used to represent the tail of the list. In patterns, underscores match anything at all, but do not introduce variables to refer to the matched data. Using underscores instead of names is a way to clearly communicate to readers that part of the input is ignored.

def List.head? {Œ± : Type} (xs : List Œ±) : Option Œ± :=
  match xs with
  | [] => none
  | y :: _ => some y
A Lean naming convention is to define operations that might fail in groups using the suffixes ? for a version that returns an Option, ! for a version that crashes when provided with invalid input, and D for a version that returns a default value when the operation would otherwise fail. Following this pattern, List.head requires the caller to provide mathematical evidence that the list is not empty, List.head? returns an Option, List.head! crashes the program when passed an empty list, and List.headD takes a default value to return in case the list is empty. The question mark and exclamation mark are part of the name, not special syntax, as Lean's naming rules are more liberal than many languages.

Because head? is defined in the List namespace, it can be used with accessor notation:

#eval primesUnder10.head?
some 2
However, attempting to test it on the empty list leads to two errors:

#eval [].head?
don't know how to synthesize implicit argument 'Œ±'
  @List.nil ?m.3
context:
‚ä¢ Type ?u.61664
don't know how to synthesize implicit argument 'Œ±'
  @_root_.List.head? ?m.3 []
context:
‚ä¢ Type ?u.61664
This is because Lean was unable to fully determine the expression's type. In particular, it could neither find the implicit type argument to List.head?, nor the implicit type argument to List.nil. In Lean's output, ?m.XYZ represents a part of a program that could not be inferred. These unknown parts are called metavariables, and they occur in some error messages. In order to evaluate an expression, Lean needs to be able to find its type, and the type was unavailable because the empty list does not have any entries from which the type can be found. Explicitly providing a type allows Lean to proceed:

#eval [].head? (Œ± := Int)
none
The type can also be provided with a type annotation:

#eval ([] : List Int).head?
none
The error messages provide a useful clue. Both messages use the same metavariable to describe the missing implicit argument, which means that Lean has determined that the two missing pieces will share a solution, even though it was unable to determine the actual value of the solution.

1.6.3.2. Prodüîó
The Prod structure, short for ‚ÄúProduct‚Äù, is a generic way of joining two values together. For instance, a Prod Nat String contains a Nat and a String. In other words, PPoint Nat could be replaced by Prod Nat Nat. Prod is very much like C#'s tuples, the Pair and Triple types in Kotlin, and tuple in C++. Many applications are best served by defining their own structures, even for simple cases like Point, because using domain terminology can make it easier to read the code. Additionally, defining structure types helps catch more errors by assigning different types to different domain concepts, preventing them from being mixed up.

On the other hand, there are some cases where it is not worth the overhead of defining a new type. Additionally, some libraries are sufficiently generic that there is no more specific concept than ‚Äúpair‚Äù. Finally, the standard library contains a variety of convenience functions that make it easier to work with the built-in pair type.

The structure Prod is defined with two type arguments:

structure Prod (Œ± : Type) (Œ≤ : Type) : Type where
  fst : Œ±
  snd : Œ≤
Lists are used so frequently that there is special syntax to make them more readable. For the same reason, both the product type and its constructor have special syntax. The type Prod Œ± Œ≤ is typically written Œ± √ó Œ≤, mirroring the usual notation for a Cartesian product of sets. Similarly, the usual mathematical notation for pairs is available for Prod. In other words, instead of writing:

def fives : String √ó Int := { fst := "five", snd := 5 }
it suffices to write:

def fives : String √ó Int := ("five", 5)
Both notations are right-associative. This means that the following definitions are equivalent:

def sevens : String √ó Int √ó Nat := ("VII", 7, 4 + 3)
def sevens : String √ó (Int √ó Nat) := ("VII", (7, 4 + 3))
In other words, all products of more than two types, and their corresponding constructors, are actually nested products and nested pairs behind the scenes.

1.6.3.3. Sumüîó
The Sum datatype is a generic way of allowing a choice between values of two different types. For instance, a Sum String Int is either a String or an Int. Like Prod, Sum should be used either when writing very generic code, for a very small section of code where there is no sensible domain-specific type, or when the standard library contains useful functions. In most situations, it is more readable and maintainable to use a custom inductive type.

Values of type Sum Œ± Œ≤ are either the constructor inl applied to a value of type Œ± or the constructor inr applied to a value of type Œ≤:

inductive Sum (Œ± : Type) (Œ≤ : Type) : Type where
  | inl : Œ± ‚Üí Sum Œ± Œ≤
  | inr : Œ≤ ‚Üí Sum Œ± Œ≤
These names are abbreviations for ‚Äúleft injection‚Äù and ‚Äúright injection‚Äù, respectively. Just as the Cartesian product notation is used for Prod, a ‚Äúcircled plus‚Äù notation is used for Sum, so Œ± ‚äï Œ≤ is another way to write Sum Œ± Œ≤. There is no special syntax for Sum.inl and Sum.inr.

As an example, if pet names can either be dog names or cat names, then a type for them can be introduced as a sum of strings:

def PetName : Type := String ‚äï String
In a real program, it would usually be better to define a custom inductive datatype for this purpose with informative constructor names. Here, Sum.inl is to be used for dog names, and Sum.inr is to be used for cat names. These constructors can be used to write a list of animal names:

def animals : List PetName :=
  [Sum.inl "Spot", Sum.inr "Tiger", Sum.inl "Fifi",
   Sum.inl "Rex", Sum.inr "Floof"]
Pattern matching can be used to distinguish between the two constructors. For instance, a function that counts the number of dogs in a list of animal names (that is, the number of Sum.inl constructors) looks like this:

def howManyDogs (pets : List PetName) : Nat :=
  match pets with
  | [] => 0
  | Sum.inl _ :: morePets => howManyDogs morePets + 1
  | Sum.inr _ :: morePets => howManyDogs morePets
Function calls are evaluated before infix operators, so howManyDogs morePets + 1 is the same as (howManyDogs morePets) + 1. As expected, #eval howManyDogs animals yields 3.

1.6.3.4. Unitüîó
Unit is a type with just one argumentless constructor, called unit. In other words, it describes only a single value, which consists of said constructor applied to no arguments whatsoever. Unit is defined as follows:

inductive Unit : Type where
  | unit : Unit
On its own, Unit is not particularly useful. However, in polymorphic code, it can be used as a placeholder for data that is missing. For instance, the following inductive datatype represents arithmetic expressions:

inductive ArithExpr (ann : Type) : Type where
  | int : ann ‚Üí Int ‚Üí ArithExpr ann
  | plus : ann ‚Üí ArithExpr ann ‚Üí ArithExpr ann ‚Üí ArithExpr ann
  | minus : ann ‚Üí ArithExpr ann ‚Üí ArithExpr ann ‚Üí ArithExpr ann
  | times : ann ‚Üí ArithExpr ann ‚Üí ArithExpr ann ‚Üí ArithExpr ann
The type argument ann stands for annotations, and each constructor is annotated. Expressions coming from a parser might be annotated with source locations, so a return type of ArithExpr SourcePos ensures that the parser put a SourcePos at each subexpression. Expressions that don't come from the parser, however, will not have source locations, so their type can be ArithExpr Unit.

Additionally, because all Lean functions have arguments, zero-argument functions in other languages can be represented as functions that take a Unit argument. In a return position, the Unit type is similar to void in languages derived from C. In the C family, a function that returns void will return control to its caller, but it will not return any interesting value. By being an intentionally uninteresting value, Unit allows this to be expressed without requiring a special-purpose void feature in the type system. Unit's constructor can be written as empty parentheses: () : Unit.

1.6.3.5. Emptyüîó
The Empty datatype has no constructors whatsoever. Thus, it indicates unreachable code, because no series of calls can ever terminate with a value at type Empty.

Empty is not used nearly as often as Unit. However, it is useful in some specialized contexts. Many polymorphic datatypes do not use all of their type arguments in all of their constructors. For instance, Sum.inl and Sum.inr each use only one of Sum's type arguments. Using Empty as one of the type arguments to Sum can rule out one of the constructors at a particular point in a program. This can allow generic code to be used in contexts that have additional restrictions.

1.6.3.6. Naming: Sums, Products, and Unitsüîó
Generally speaking, types that offer multiple constructors are called sum types, while types whose single constructor takes multiple arguments are called product types. These terms are related to sums and products used in ordinary arithmetic. The relationship is easiest to see when the types involved contain a finite number of values. If Œ± and Œ≤ are types that contain 
n
n and 
k
k distinct values, respectively, then Œ± ‚äï Œ≤ contains 
n
+
k
n+k distinct values and Œ± √ó Œ≤ contains 
n
√ó
k
n√ók distinct values. For instance, Bool has two values: true and false, and Unit has one value: Unit.unit. The product Bool √ó Unit has the two values (true, Unit.unit) and (false, Unit.unit), and the sum Bool ‚äï Unit has the three values Sum.inl true, Sum.inl false, and Sum.inr Unit.unit. Similarly, 
2
√ó
1
=
2
2√ó1=2, and 
2
+
1
=
3
2+1=3.

1.6.4. Messages You May Meetüîó
Not all definable structures or inductive types can have the type Type. In particular, if a constructor takes an arbitrary type as an argument, then the inductive type must have a different type. These errors usually state something about ‚Äúuniverse levels‚Äù. For example, for this inductive type:

inductive MyType : Type where
  | ctor : (Œ± : Type) ‚Üí Œ± ‚Üí MyType
Lean gives the following error:

Invalid universe level in constructor `MyType.ctor`: Parameter `Œ±` has type
  Type
at universe level
  2
which is not less than or equal to the inductive type's resulting universe level
  1
A later chapter describes why this is the case, and how to modify definitions to make them work. For now, try making the type an argument to the inductive type as a whole, rather than to the constructor.

Similarly, if a constructor's argument is a function that takes the datatype being defined as an argument, then the definition is rejected. For example:

inductive MyType : Type where
  | ctor : (MyType ‚Üí Int) ‚Üí MyType
yields the message:

(kernel) arg #1 of 'MyType.ctor' has a non positive occurrence of the datatypes being declared
For technical reasons, allowing these datatypes could make it possible to undermine Lean's internal logic, making it unsuitable for use as a theorem prover.

Recursive functions that take two parameters should not match against the pair, but rather match each parameter independently. Otherwise, the mechanism in Lean that checks whether recursive calls are made on smaller values is unable to see the connection between the input value and the argument in the recursive call. For example, this function that determines whether two lists have the same length is rejected:

def sameLength (xs : List Œ±) (ys : List Œ≤) : Bool :=
  match (xs, ys) with
  | ([], []) => true
  | (x :: xs', y :: ys') => sameLength xs' ys'
  | _ => false
The error message is:

fail to show termination for
  sameLength
with errors
failed to infer structural recursion:
Not considering parameter Œ± of sameLength:
  it is unchanged in the recursive calls
Not considering parameter Œ≤ of sameLength:
  it is unchanged in the recursive calls
Cannot use parameter xs:
  failed to eliminate recursive application
    sameLength xs' ys'
Cannot use parameter ys:
  failed to eliminate recursive application
    sameLength xs' ys'


Could not find a decreasing measure.
The basic measures relate at each recursive call as follows:
(<, ‚â§, =: relation proved, ? all proofs failed, _: no proof attempted)
              xs ys
1) 1816:28-46  ?  ?
Please use `termination_by` to specify a decreasing measure.
The problem can be fixed through nested pattern matching:

def sameLength (xs : List Œ±) (ys : List Œ≤) : Bool :=
  match xs with
  | [] =>
    match ys with
    | [] => true
    | _ => false
  | x :: xs' =>
    match ys with
    | y :: ys' => sameLength xs' ys'
    | _ => false
Simultaneous matching, described in the next section, is another way to solve the problem that is often more elegant.

Forgetting an argument to an inductive type can also yield a confusing message. For example, when the argument Œ± is not passed to MyType in ctor's type:

inductive MyType (Œ± : Type) : Type where
  | ctor : Œ± ‚Üí MyType
Lean replies with the following error:

type expected, got
  (MyType : Type ‚Üí Type)
The error message is saying that MyType's type, which is Type ‚Üí Type, does not itself describe types. MyType requires an argument to become an actual honest-to-goodness type.

The same message can appear when type arguments are omitted in other contexts, such as in a type signature for a definition:

inductive MyType (Œ± : Type) : Type where
  | ctor : Œ± ‚Üí MyType Œ±
def ofFive : MyType := ctor 5
type expected, got
  (MyType : Type ‚Üí Type)
Evaluating expressions that use polymorphic types may trigger a situation in which Lean is incapable of displaying a value. The #eval command evaluates the provided expression, using the expression's type to determine how to display the result. For some types, such as functions, this process fails, but Lean is perfectly capable of automatically generating display code for most other types. There is no need, for example, to provide Lean with any specific display code for WoodSplittingTool:

inductive WoodSplittingTool where
  | axe
  | maul
  | froe
#eval WoodSplittingTool.axe
WoodSplittingTool.axe
There are limits to the automation that Lean uses here, however. allTools is a list of all three tools:

def allTools : List WoodSplittingTool := [
  WoodSplittingTool.axe,
  WoodSplittingTool.maul,
  WoodSplittingTool.froe
]
Evaluating it leads to an error:

#eval allTools
could not synthesize a 'ToExpr', 'Repr', or 'ToString' instance for type
  List WoodSplittingTool
This is because Lean attempts to use code from a built-in table to display a list, but this code demands that display code for WoodSplittingTool already exists. This error can be worked around by instructing Lean to generate this display code when a datatype is defined, instead of at the last moment as part of #eval, by adding deriving Repr to its definition:

inductive Firewood where
  | birch
  | pine
  | beech
deriving Repr
Evaluating a list of Firewood succeeds:

def allFirewood : List Firewood := [
  Firewood.birch,
  Firewood.pine,
  Firewood.beech
]
#eval allFirewood
[Firewood.birch, Firewood.pine, Firewood.beech]
1.6.5. Exercisesüîó
Write a function to find the last entry in a list. It should return an Option.

Write a function that finds the first entry in a list that satisfies a given predicate. Start the definition with def List.findFirst? {Œ± : Type} (xs : List Œ±) (predicate : Œ± ‚Üí Bool) : Option Œ± := ‚Ä¶.

Write a function Prod.switch that switches the two fields in a pair for each other. Start the definition with def Prod.switch {Œ± Œ≤ : Type} (pair : Œ± √ó Œ≤) : Œ≤ √ó Œ± := ‚Ä¶.

Rewrite the PetName example to use a custom datatype and compare it to the version that uses Sum.

Write a function zip that combines two lists into a list of pairs. The resulting list should be as long as the shortest input list. Start the definition with def zip {Œ± Œ≤ : Type} (xs : List Œ±) (ys : List Œ≤) : List (Œ± √ó Œ≤) := ‚Ä¶.

Write a polymorphic function take that returns the first 
n
n entries in a list, where 
n
n is a Nat. If the list contains fewer than 
n
n entries, then the resulting list should be the entire input list. #eval take 3 ["bolete", "oyster"] should yield ["bolete", "oyster"], and #eval take 1 ["bolete", "oyster"] should yield ["bolete"].

Using the analogy between types and arithmetic, write a function that distributes products over sums. In other words, it should have type Œ± √ó (Œ≤ ‚äï Œ≥) ‚Üí (Œ± √ó Œ≤) ‚äï (Œ± √ó Œ≥).

Using the analogy between types and arithmetic, write a function that turns multiplication by two into a sum. In other words, it should have type Bool √ó Œ± ‚Üí Œ± ‚äï Œ±.

1.7. Additional Conveniencesüîó
Lean contains a number of convenience features that make programs much more concise.

1.7.1. Automatic Implicit Parametersüîó
When writing polymorphic functions in Lean, it is typically not necessary to list all the implicit parameters. Instead, they can simply be mentioned. If Lean can determine their type, then they are automatically inserted as implicit parameters. In other words, the previous definition of length:

def length {Œ± : Type} (xs : List Œ±) : Nat :=
  match xs with
  | [] => 0
  | y :: ys => Nat.succ (length ys)
can be written without {Œ± : Type}:

def length (xs : List Œ±) : Nat :=
  match xs with
  | [] => 0
  | y :: ys => Nat.succ (length ys)
This can greatly simplify highly polymorphic definitions that take many implicit parameters.

1.7.2. Pattern-Matching Definitionsüîó
When defining functions with def, it is quite common to name an argument and then immediately use it with pattern matching. For instance, in length, the argument xs is used only in match. In these situations, the cases of the match expression can be written directly, without naming the argument at all.

The first step is to move the arguments' types to the right of the colon, so the return type is a function type. For instance, the type of length is List Œ± ‚Üí Nat. Then, replace the := with each case of the pattern match:

def length : List Œ± ‚Üí Nat
  | [] => 0
  | y :: ys => Nat.succ (length ys)
This syntax can also be used to define functions that take more than one argument. In this case, their patterns are separated by commas. For instance, drop takes a number 
n
n and a list, and returns the list after removing the first 
n
n entries.

def drop : Nat ‚Üí List Œ± ‚Üí List Œ±
  | Nat.zero, xs => xs
  | _, [] => []
  | Nat.succ n, x :: xs => drop n xs
Named arguments and patterns can also be used in the same definition. For instance, a function that takes a default value and an optional value, and returns the default when the optional value is none, can be written:

def fromOption (default : Œ±) : Option Œ± ‚Üí Œ±
  | none => default
  | some x => x
This function is called Option.getD in the standard library, and can be called with dot notation:

#eval (some "salmonberry").getD ""
"salmonberry"
#eval none.getD ""
""
1.7.3. Local Definitionsüîó
It is often useful to name intermediate steps in a computation. In many cases, intermediate values represent useful concepts all on their own, and naming them explicitly can make the program easier to read. In other cases, the intermediate value is used more than once. As in most other languages, writing down the same code twice in Lean causes it to be computed twice, while saving the result in a variable leads to the result of the computation being saved and re-used.

For instance, unzip is a function that transforms a list of pairs into a pair of lists. When the list of pairs is empty, then the result of unzip is a pair of empty lists. When the list of pairs has a pair at its head, then the two fields of the pair are added to the result of unzipping the rest of the list. This definition of unzip follows that description exactly:

def unzip : List (Œ± √ó Œ≤) ‚Üí List Œ± √ó List Œ≤
  | [] => ([], [])
  | (x, y) :: xys =>
    (x :: (unzip xys).fst, y :: (unzip xys).snd)
Unfortunately, there is a problem: this code is slower than it needs to be. Each entry in the list of pairs leads to two recursive calls, which makes this function take exponential time. However, both recursive calls will have the same result, so there is no reason to make the recursive call twice.

In Lean, the result of the recursive call can be named, and thus saved, using let. Local definitions with let resemble top-level definitions with def: it takes a name to be locally defined, arguments if desired, a type signature, and then a body following :=. After the local definition, the expression in which the local definition is available (called the body of the let-expression) must be on a new line, starting at a column in the file that is less than or equal to that of the let keyword. A local definition with let in unzip looks like this:

def unzip : List (Œ± √ó Œ≤) ‚Üí List Œ± √ó List Œ≤
  | [] => ([], [])
  | (x, y) :: xys =>
    let unzipped : List Œ± √ó List Œ≤ := unzip xys
    (x :: unzipped.fst, y :: unzipped.snd)
To use let on a single line, separate the local definition from the body with a semicolon.

Local definitions with let may also use pattern matching when one pattern is enough to match all cases of a datatype. In the case of unzip, the result of the recursive call is a pair. Because pairs have only a single constructor, the name unzipped can be replaced with a pair pattern:

def unzip : List (Œ± √ó Œ≤) ‚Üí List Œ± √ó List Œ≤
  | [] => ([], [])
  | (x, y) :: xys =>
    let (xs, ys) : List Œ± √ó List Œ≤ := unzip xys
    (x :: xs, y :: ys)
Judicious use of patterns with let can make code easier to read, compared to writing the accessor calls by hand.

The biggest difference between let and def is that recursive let definitions must be explicitly indicated by writing let rec. For instance, one way to reverse a list involves a recursive helper function, as in this definition:

def reverse (xs : List Œ±) : List Œ± :=
  let rec helper : List Œ± ‚Üí List Œ± ‚Üí List Œ±
    | [], soFar => soFar
    | y :: ys, soFar => helper ys (y :: soFar)
  helper xs []
The helper function walks down the input list, moving one entry at a time over to soFar. When it reaches the end of the input list, soFar contains a reversed version of the input.

1.7.4. Type Inferenceüîó
In many situations, Lean can automatically determine an expression's type. In these cases, explicit types may be omitted from both top-level definitions (with def) and local definitions (with let). For example, the recursive call to unzip does not need an annotation:

def unzip : List (Œ± √ó Œ≤) ‚Üí List Œ± √ó List Œ≤
  | [] => ([], [])
  | (x, y) :: xys =>
    let unzipped := unzip xys
    (x :: unzipped.fst, y :: unzipped.snd)
As a rule of thumb, omitting the types of literal values (like strings and numbers) usually works, although Lean may pick a type for literal numbers that is more specific than the intended type. Lean can usually determine a type for a function application, because it already knows the argument types and the return type. Omitting return types for function definitions will often work, but function parameters typically require annotations. Definitions that are not functions, like unzipped in the example, do not need type annotations if their bodies do not need type annotations, and the body of this definition is a function application.

Omitting the return type for unzip is possible when using an explicit match expression:

def unzip (pairs : List (Œ± √ó Œ≤)) :=
  match pairs with
  | [] => ([], [])
  | (x, y) :: xys =>
    let unzipped := unzip xys
    (x :: unzipped.fst, y :: unzipped.snd)
Generally speaking, it is a good idea to err on the side of too many, rather than too few, type annotations. First off, explicit types communicate assumptions about the code to readers. Even if Lean can determine the type on its own, it can still be easier to read code without having to repeatedly query Lean for type information. Secondly, explicit types help localize errors. The more explicit a program is about its types, the more informative the error messages can be. This is especially important in a language like Lean that has a very expressive type system. Thirdly, explicit types make it easier to write the program in the first place. The type is a specification, and the compiler's feedback can be a helpful tool in writing a program that meets the specification. Finally, Lean's type inference is a best-effort system. Because Lean's type system is so expressive, there is no ‚Äúbest‚Äù or most general type to find for all expressions. This means that even if you get a type, there's no guarantee that it's the right type for a given application. For instance, 14 can be a Nat or an Int:

#check 14
14 : Nat
#check (14 : Int)
14 : Int
Missing type annotations can give confusing error messages. Omitting all types from the definition of unzip:

def unzip pairs :=
  match pairs with
  | [] => ([], [])
  | (x, y) :: xys =>
    let unzipped := unzip xys
    (x :: unzipped.fst, y :: unzipped.snd)
leads to a message about the match expression:

Invalid match expression: This pattern contains metavariables:
  []
This is because match needs to know the type of the value being inspected, but that type was not available. A ‚Äúmetavariable‚Äù is an unknown part of a program, written ?m.XYZ in error messages‚Äîthey are described in the section on Polymorphism. In this program, the type annotation on the argument is required.

Even some very simple programs require type annotations. For instance, the identity function just returns whatever argument it is passed. With argument and type annotations, it looks like this:

def id (x : Œ±) : Œ± := x
Lean is capable of determining the return type on its own:

def id (x : Œ±) := x
Omitting the argument type, however, causes an error:

def id x := x
Failed to infer type of binder `x`
In general, messages that say something like ‚Äúfailed to infer‚Äù or that mention metavariables are often a sign that more type annotations are necessary. Especially while still learning Lean, it is useful to provide most types explicitly.

1.7.5. Simultaneous Matchingüîó
Pattern-matching expressions, just like pattern-matching definitions, can match on multiple values at once. Both the expressions to be inspected and the patterns that they match against are written with commas between them, similarly to the syntax used for definitions. Here is a version of drop that uses simultaneous matching:

def drop (n : Nat) (xs : List Œ±) : List Œ± :=
  match n, xs with
  | Nat.zero, ys => ys
  | _, [] => []
  | Nat.succ n , y :: ys => drop n ys
Simultaneous matching resembles matching on a pair, but there is an important difference. Lean tracks the connection between the expression being matched and the patterns, and this information is used for purposes that include checking for termination and propagating static type information. As a result, the version of sameLength that matches a pair is rejected by the termination checker, because the connection between xs and x :: xs' is obscured by the intervening pair:

def sameLength (xs : List Œ±) (ys : List Œ≤) : Bool :=
  match (xs, ys) with
  | ([], []) => true
  | (x :: xs', y :: ys') => sameLength xs' ys'
  | _ => false
fail to show termination for
  sameLength
with errors
failed to infer structural recursion:
Not considering parameter Œ± of sameLength:
  it is unchanged in the recursive calls
Not considering parameter Œ≤ of sameLength:
  it is unchanged in the recursive calls
Cannot use parameter xs:
  failed to eliminate recursive application
    sameLength xs' ys'
Cannot use parameter ys:
  failed to eliminate recursive application
    sameLength xs' ys'


Could not find a decreasing measure.
The basic measures relate at each recursive call as follows:
(<, ‚â§, =: relation proved, ? all proofs failed, _: no proof attempted)
              xs ys
1) 1816:28-46  ?  ?
Please use `termination_by` to specify a decreasing measure.
Simultaneously matching both lists is accepted:

def sameLength (xs : List Œ±) (ys : List Œ≤) : Bool :=
  match xs, ys with
  | [], [] => true
  | x :: xs', y :: ys' => sameLength xs' ys'
  | _, _ => false
1.7.6. Natural Number Patternsüîó
In the section on datatypes and patterns, even was defined like this:

def even (n : Nat) : Bool :=
  match n with
  | Nat.zero => true
  | Nat.succ k => not (even k)
Just as there is special syntax to make list patterns more readable than using List.cons and List.nil directly, natural numbers can be matched using literal numbers and +. For example, even can also be defined like this:

def even : Nat ‚Üí Bool
  | 0 => true
  | n + 1 => not (even n)
In this notation, the arguments to the + pattern serve different roles. Behind the scenes, the left argument (n above) becomes an argument to some number of Nat.succ patterns, and the right argument (1 above) determines how many Nat.succs to wrap around the pattern. The explicit patterns in halve, which divides a Nat by two and drops the remainder:

def halve : Nat ‚Üí Nat
  | Nat.zero => 0
  | Nat.succ Nat.zero => 0
  | Nat.succ (Nat.succ n) => halve n + 1
can be replaced by numeric literals and +:

def halve : Nat ‚Üí Nat
  | 0 => 0
  | 1 => 0
  | n + 2 => halve n + 1
Behind the scenes, both definitions are completely equivalent. Remember: halve n + 1 is equivalent to (halve n) + 1, not halve (n + 1).

When using this syntax, the second argument to + should always be a literal Nat. Even though addition is commutative, flipping the arguments in a pattern can result in errors like the following:

def halve : Nat ‚Üí Nat
  | 0 => 0
  | 1 => 0
  | 2 + n => halve n + 1
Invalid pattern(s): `n` is an explicit pattern variable, but it only occurs in positions that are inaccessible to pattern matching:
  .(Nat.add 2 n)
This restriction enables Lean to transform all uses of the + notation in a pattern into uses of the underlying Nat.succ, keeping the language simpler behind the scenes.

1.7.7. Anonymous Functionsüîó
Functions in Lean need not be defined at the top level. As expressions, functions are produced with the fun syntax. Function expressions begin with the keyword fun, followed by one or more parameters, which are separated from the return expression using =>. For instance, a function that adds one to a number can be written:

#check fun x => x + 1
fun x => x + 1 : Nat ‚Üí Nat
Type annotations are written the same way as on def, using parentheses and colons:

#check fun (x : Int) => x + 1
fun x => x + 1 : Int ‚Üí Int
Similarly, implicit parameters may be written with curly braces:

#check fun {Œ± : Type} (x : Œ±) => x
fun {Œ±} x => x : {Œ± : Type} ‚Üí Œ± ‚Üí Œ±
This style of anonymous function expression is often referred to as a lambda expression, because the typical notation used in mathematical descriptions of programming languages uses the Greek letter Œª (lambda) where Lean has the keyword fun. Even though Lean does permit Œª to be used instead of fun, it is most common to write fun.

Anonymous functions also support the multiple-pattern style used in def. For instance, a function that returns the predecessor of a natural number if it exists can be written:

#check fun
  | 0 => none
  | n + 1 => some n
fun x =>
  match x with
  | 0 => none
  | n.succ => some n : Nat ‚Üí Option Nat
Note that Lean's own description of the function has a named argument and a match expression. Many of Lean's convenient syntactic shorthands are expanded to simpler syntax behind the scenes, and the abstraction sometimes leaks.

Definitions using def that take arguments may be rewritten as function expressions. For instance, a function that doubles its argument can be written as follows:

def double : Nat ‚Üí Nat := fun
  | 0 => 0
  | k + 1 => double k + 2
When an anonymous function is very simple, like fun x => x + 1, the syntax for creating the function can be fairly verbose. In that particular example, six non-whitespace characters are used to introduce the function, and its body consists of only three non-whitespace characters. For these simple cases, Lean provides a shorthand. In an expression surrounded by parentheses, a centered dot character ¬∑ can stand for a parameter, and the expression inside the parentheses becomes the function's body. That particular function can also be written (¬∑ + 1).

The centered dot always creates a function out of the closest surrounding set of parentheses. For instance, (¬∑ + 5, 3) is a function that returns a pair of numbers, while ((¬∑ + 5), 3) is a pair of a function and a number. If multiple dots are used, then they become parameters from left to right:

(¬∑ , ¬∑) 1 2
(1, ¬∑) 2
(1, 2)
Anonymous functions can be applied in precisely the same way as functions defined using def or let. The command #eval (fun x => x + x) 5 results in:

10
while #eval (¬∑ * 2) 5 results in:

10
1.7.8. Namespacesüîó
Each name in Lean occurs in a namespace, which is a collection of names. Names are placed in namespaces using ., so List.map is the name map in the List namespace. Names in different namespaces do not conflict with each other, even if they are otherwise identical. This means that List.map and Array.map are different names. Namespaces may be nested, so Project.Frontend.User.loginTime is the name loginTime in the nested namespace Project.Frontend.User.

Names can be directly defined within a namespace. For instance, the name double can be defined in the Nat namespace:

def Nat.double (x : Nat) : Nat := x + x
Because Nat is also the name of a type, dot notation is available to call Nat.double on expressions with type Nat:

#eval (4 : Nat).double
8
In addition to defining names directly in a namespace, a sequence of declarations can be placed in a namespace using the namespace and end commands. For instance, this defines triple and quadruple in the namespace NewNamespace:

namespace NewNamespace
def triple (x : Nat) : Nat := 3 * x
def quadruple (x : Nat) : Nat := 2 * x + 2 * x
end NewNamespace
To refer to them, prefix their names with NewNamespace.:

#check NewNamespace.triple
NewNamespace.triple (x : Nat) : Nat
#check NewNamespace.quadruple
NewNamespace.quadruple (x : Nat) : Nat
Namespaces may be opened, which allows the names in them to be used without explicit qualification. Writing open MyNamespace in before an expression causes the contents of MyNamespace to be available in the expression. For example, timesTwelve uses both quadruple and triple after opening NewNamespace:

def timesTwelve (x : Nat) :=
  open NewNamespace in
  quadruple (triple x)
Namespaces can also be opened prior to a command. This allows all parts of the command to refer to the contents of the namespace, rather than just a single expression. To do this, place the openÔªø ... in prior to the command.

open NewNamespace in
#check quadruple
NewNamespace.quadruple (x : Nat) : Nat
Function signatures show the name's full namespace. Namespaces may additionally be opened for all following commands for the rest of the file. To do this, simply omit the in from a top-level usage of open.

1.7.9. if letüîó
When consuming values that have a sum type, it is often the case that only a single constructor is of interest. For example, given this type that represents a subset of Markdown inline elements:

inductive Inline : Type where
  | lineBreak
  | string : String ‚Üí Inline
  | emph : Inline ‚Üí Inline
  | strong : Inline ‚Üí Inline
a function that recognizes string elements and extracts their contents can be written:

def Inline.string? (inline : Inline) : Option String :=
  match inline with
  | Inline.string s => some s
  | _ => none
An alternative way of writing this function's body uses if together with let:

def Inline.string? (inline : Inline) : Option String :=
  if let Inline.string s := inline then
    some s
  else none
This is very much like the pattern-matching let syntax. The difference is that it can be used with sum types, because a fallback is provided in the else case. In some contexts, using if let instead of match can make code easier to read.

1.7.10. Positional Structure Argumentsüîó
The section on structures presents two ways of constructing structures:

The constructor can be called directly, as in Point.mk 1 2.

Brace notation can be used, as in { x := 1, y := 2 }.

In some contexts, it can be convenient to pass arguments positionally, rather than by name, but without naming the constructor directly. For instance, defining a variety of similar structure types can help keep domain concepts separate, but the natural way to read the code may treat each of them as being essentially a tuple. In these contexts, the arguments can be enclosed in angle brackets ‚ü® and ‚ü©. A Point can be written ‚ü®1, 2‚ü©. Be careful! Even though they look like the less-than sign < and greater-than sign >, these brackets are different. They can be input using \< and \>, respectively.

Just as with the brace notation for named constructor arguments, this positional syntax can only be used in a context where Lean can determine the structure's type, either from a type annotation or from other type information in the program. For instance, #eval ‚ü®1, 2‚ü© yields the following error:

Invalid `‚ü®...‚ü©` notation: The expected type of this term could not be determined
This error occurs because there is no type information available. Adding an annotation, such as in #eval (‚ü®1, 2‚ü© : Point), solves the problem:

{ x := 1.000000, y := 2.000000 }
1.7.11. String Interpolationüîó
In Lean, prefixing a string with s! triggers interpolation, where expressions contained in curly braces inside the string are replaced with their values. This is similar to f-strings in Python and $-prefixed strings in C#. For instance,

#eval s!"three fives is {NewNamespace.triple 5}"
yields the output

"three fives is 15"
Not all expressions can be interpolated into a string. For instance, attempting to interpolate a function results in an error.

#check s!"three fives is {NewNamespace.triple}"
yields the error

failed to synthesize
  ToString (Nat ‚Üí Nat)

Hint: Additional diagnostic information may be available using the `set_option diagnostics true` command.
This is because there is no standard way to convert functions into strings. Just as the compiler maintains a table that describes how to display the result of evaluating expressions of various types, it maintains a table that describes how to convert values of various types into strings. The message failed to synthesize instance means that the Lean compiler didn't find an entry in this table for the given type. The chapter on type classes describes this mechanism in more detail, including the means of adding new entries to the table.

1.8. Summaryüîó
1.8.1. Evaluating Expressions
In Lean, computation occurs when expressions are evaluated. This follows the usual rules of mathematical expressions: sub-expressions are replaced by their values following the usual order of operations, until the entire expression has become a value. When evaluating an if or a match, the expressions in the branches are not evaluated until the value of the condition or the match subject has been found.

Once they have been given a value, variables never change. Similarly to mathematics but unlike most programming languages, Lean variables are simply placeholders for values, rather than addresses to which new values can be written. Variables' values may come from global definitions with def, local definitions with let, as named arguments to functions, or from pattern matching.

1.8.2. Functions
Functions in Lean are first-class values, meaning that they can be passed as arguments to other functions, saved in variables, and used like any other value. Every Lean function takes exactly one argument. To encode a function that takes more than one argument, Lean uses a technique called currying, where providing the first argument returns a function that expects the remaining arguments. To encode a function that takes no arguments, Lean uses the Unit type, which is the least informative possible argument.

There are three primary ways of creating functions:

Anonymous functions are written using fun. For instance, a function that swaps the fields of a Point can be written fun (point : Point) => { x := point.y, y := point.x : Point }

Very simple anonymous functions are written by placing one or more centered dots ¬∑ inside of parentheses. Each centered dot becomes an argument to the function, and the parentheses delimit its body. For instance, a function that subtracts one from its argument can be written as (¬∑ - 1) instead of as fun x => x - 1.

Functions can be defined using def or let by adding an argument list or by using pattern-matching notation.

1.8.3. Types
Lean checks that every expression has a type. Types, such as Int, Point, {Œ± : Type} ‚Üí Nat ‚Üí Œ± ‚Üí List Œ±, and Option (String ‚äï (Nat √ó String)), describe the values that may eventually be found for an expression. Like other languages, types in Lean can express lightweight specifications for programs that are checked by the Lean compiler, obviating the need for certain classes of unit test. Unlike most languages, Lean's types can also express arbitrary mathematics, unifying the worlds of programming and theorem proving. While using Lean for proving theorems is mostly out of scope for this book, Theorem Proving in Lean 4 contains more information on this topic.

Some expressions can be given multiple types. For instance, 3 can be an Int or a Nat. In Lean, this should be understood as two separate expressions, one with type Nat and one with type Int, that happen to be written in the same way, rather than as two different types for the same thing.

Lean is sometimes able to determine types automatically, but types must often be provided by the user. This is because Lean's type system is so expressive. Even when Lean can find a type, it may not find the desired type‚Äî3 could be intended to be used as an Int, but Lean will give it the type Nat if there are no further constraints. In general, it is a good idea to write most types explicitly, only letting Lean fill out the very obvious types. This improves Lean's error messages and helps make programmer intent more clear.

Some functions or datatypes take types as arguments. They are called polymorphic. Polymorphism allows programs such as one that calculates the length of a list without caring what type the entries in the list have. Because types are first class in Lean, polymorphism does not require any special syntax, so types are passed just like other arguments. Naming an argument in a function type allows later types to mention that name, and when the function is applied to an argument, the type of the resulting term is found by replacing the argument's name with the actual value it was applied to.

1.8.4. Structures and Inductive Types
Brand new datatypes can be introduced to Lean using the structure or inductive features. These new types are not considered to be equivalent to any other type, even if their definitions are otherwise identical. Datatypes have constructors that explain the ways in which their values can be constructed, and each constructor takes some number of arguments. Constructors in Lean are not the same as constructors in object-oriented languages: Lean's constructors are inert holders of data, rather than active code that initializes an allocated object.

Typically, structure is used to introduce a product type (that is, a type with just one constructor that takes any number of arguments), while inductive is used to introduce a sum type (that is, a type with many distinct constructors). Datatypes defined with structure are provided with one accessor function for each field. Both structures and inductive datatypes may be consumed with pattern matching, which exposes the values stored inside of constructors using a subset of the syntax used to call said constructors. Pattern matching means that knowing how to create a value implies knowing how to consume it.

1.8.5. Recursion
A definition is recursive when the name being defined is used in the definition itself. Because Lean is an interactive theorem prover in addition to being a programming language, there are certain restrictions placed on recursive definitions. In Lean's logical side, circular definitions could lead to logical inconsistency.

In order to ensure that recursive definitions do not undermine the logical side of Lean, Lean must be able to prove that all recursive functions terminate, no matter what arguments they are called with. In practice, this means either that recursive calls are all performed on a structurally-smaller piece of the input, which ensures that there is always progress towards a base case, or that users must provide some other evidence that the function always terminates. Similarly, recursive inductive types are not allowed to have a constructor that takes a function from the type as an argument, because this would make it possible to

